[{"/Users/hakantaskirmaz/Downloads/current_projects/fitness-pall/fitness-pall/src/App.js":"1","/Users/hakantaskirmaz/Downloads/current_projects/fitness-pall/fitness-pall/src/reportWebVitals.js":"2","/Users/hakantaskirmaz/Downloads/current_projects/fitness-pall/fitness-pall/src/index.js":"3"},{"size":12755,"mtime":1607445552434,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1606324743744,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1606324743743,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1dy2d3m",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hakantaskirmaz/Downloads/current_projects/fitness-pall/fitness-pall/src/App.js",["15","16","17","18","19","20"],"import \"./App.css\"\nimport React, { useState, useEffect } from \"react\"\nimport firebase from \"firebase\"\nimport { Helmet } from \"react-helmet\"\n\nimport Button from \"@material-ui/core/Button\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport TextField from \"@material-ui/core/TextField\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport RemoveIcon from \"@material-ui/icons/Remove\"\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\n\nimport Autocomplete, {\n  createFilterOptions\n} from \"@material-ui/lab/Autocomplete\"\nconst filter = createFilterOptions()\n\n// config firebase\nif (!firebase.apps.length) {\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_APIKEY,\n    authDomain: process.env.REACT_APP_AUTHDOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASEURL,\n    projectId: process.env.REACT_APP_PROJECTID,\n    storageBucket: process.env.REACT_APP_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,\n    appId: process.env.REACT_APP_APPID,\n    measurementId: process.env.REACT_APP_MEASUREMENTID\n  }\n  firebase.initializeApp(firebaseConfig)\n}\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nconst exc = [{ oefening: \"\", weight: 0 }]\n\nconst autcompletevalues = [{ oefening: \"\", weight: 0 }]\n\nfunction App() {\n  const [user, setUser] = useState({})\n  const date = new Date().toLocaleDateString()\n  // const [oefening, setOefening] = useState(\"\")\n  // const [gewicht, setGewicht] = useState(0)\n  const [exercise, setExercise] = useState([{ oefening: \"\", gewicht: 0 }])\n  const [ex, setEx] = useState({ oefening: \"\", gewicht: 0 })\n\n  const [entryPassed, setEntryPassed] = useState(false)\n  const [openSuccess, setOpenSucess] = React.useState(false)\n  const [openError, setOpenError] = React.useState(false)\n\n  const [showProgress, setShowProgress] = useState(false)\n  const [progressData, setProgressData] = useState()\n\n  const [value, setValue] = useState(null)\n\n  const getData = () => {\n    setShowProgress(true)\n    const db = firebase.firestore()\n    let result = []\n    db.collection(\"Users\")\n      .doc(user.email)\n      .collection(\"Workouts\")\n      .get()\n      .then(function (x) {\n        x.forEach(function (y) {\n          // console.log(y.data().date.toDate())\n          // console.log(y.data())\n          result.push({\n            date: y.data().date.toDate(),\n            exercise: y.data().exercise\n          })\n        })\n        setProgressData(result)\n      })\n  }\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    setOpenSucess(false)\n    setOpenError(false)\n  }\n\n  const submit = () => {\n    // disable button by telling the app that entryPass is true.\n    // When something goes wrong change it back to false.\n    setEntryPassed(true)\n\n    //check values\n    if (\n      exercise[0].oefening.length <= 0 ||\n      exercise[0].oefening.length > 30 ||\n      exercise[0].gewicht <= 0 ||\n      exercise[0].gewicht.length > 30\n    ) {\n      //show error\n      setEntryPassed(false)\n      return console.log(\"exercise issue\")\n    }\n\n    const data = {\n      exercise\n    }\n    // const testUserDate = testUser + testDate;\n    //add entry to db\n\n    //using test entries. Change to the others variables when done testing\n    setEntry(user, date, data)\n  }\n\n  const setEntry = (user, date, data) => {\n    const db = firebase.firestore()\n    //when adding data it is easily possible to create a new User or a new workout date, just fill in the new data and if it doesn't exist the database creates it for you!\n    db.collection(\"Users\")\n      .doc(user.email)\n      .collection(\"Workouts\")\n      .doc()\n      .set({ ...data, date: firebase.firestore.Timestamp.fromDate(new Date()) })\n      .then(function () {\n        setEntryPassed(true)\n        setOpenSucess(true)\n      })\n      .catch(function (error) {\n        setEntryPassed(false)\n        setOpenError(true)\n        console.log(error)\n      })\n  }\n\n  const handleInputChange = (e, index) => {\n    setEntryPassed(false)\n    const { name, value } = e.target\n    const list = [...exercise]\n    list[index][name] = value\n    setExercise(list)\n  }\n\n  // handle click event of the Remove button\n  const handleRemoveClick = (index) => {\n    const list = [...exercise]\n    list.splice(index, 1)\n    setExercise(list)\n  }\n\n  // handle click event of the Add button\n  const handleAddClick = () => {\n    setExercise([...exercise, { oefening: \"\", gewicht: \"\" }])\n  }\n\n  const onLogin = () => {\n    var provider = new firebase.auth.GoogleAuthProvider()\n\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(function (result) {\n        // console.log(`login successful!`)\n      })\n      .catch(function (error) {\n        console.log(`Something went wrong...`)\n        console.log(error)\n      })\n  }\n\n  const onLogout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(function () {\n        console.log(`sign out successful`)\n        setUser({})\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n\n  const isEmpty = (obj) => {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false\n      }\n    }\n\n    return JSON.stringify(obj) === JSON.stringify({})\n  }\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        // console.log(`user signed in: `, user.displayName)\n        setUser(user)\n      } else {\n        // console.log(`nobody has signed in yet...`)\n      }\n    })\n  })\n\n  return (\n    <div id=\"body\">\n      {!isEmpty(user) ? (\n        <div id=\"content\">\n          <h1>Welkom {user.displayName}</h1>\n\n          {exercise.map((x, i) => {\n            return (\n              <div key={`${i}-${x.oefening}`} id=\"content_form\">\n                <div id=\"content_form_textfield\">\n                  {/* <TextField\n                    fullWidth\n                    name=\"oefening\"\n                    label=\"oefening\"\n                    value={x.oefening}\n                    onChange={(e) => handleInputChange(e, i)}\n                  /> */}\n                  <Autocomplete\n                    value={x}\n                    multiple={false}\n                    onChange={(event, newValue, reason) => {\n                      if (newValue && newValue.inputValue) {\n                        // Create a new value from the user input\n\n                        let list = [...exercise]\n                        list[i] = {\n                          oefening: newValue.inputValue,\n                          gewicht: 0\n                        }\n\n                        setExercise(list)\n                      } else if (newValue) {\n                        // Value is autocomplete\n\n                        let list = [...exercise]\n                        list[i] = {\n                          oefening: newValue.oefening,\n                          gewicht: 0\n                        }\n\n                        setExercise(list)\n                      } else {\n                        // Value is null\n                        setExercise([...exercise])\n                      }\n                    }}\n                    filterOptions={(options, params) => {\n                      const filtered = filter(options, params)\n\n                      // Suggest the creation of a new value\n                      if (params.inputValue !== \"\") {\n                        filtered.push({\n                          inputValue: params.inputValue,\n                          oefening: `Add \"${params.inputValue}\"`\n                        })\n                      }\n\n                      return filtered\n                    }}\n                    selectOnFocus\n                    clearOnBlur\n                    handleHomeEndKeys\n                    getOptionLabel={(option) => {\n                      // Value selected with enter, right from the input\n                      if (typeof option === \"string\") {\n                        return option\n                      }\n                      // Add \"xxx\" option created dynamically\n                      if (option.inputValue) {\n                        return option.inputValue\n                      }\n                      // Regular option\n                      return option.oefening\n                    }}\n                    renderOption={(option) => option.oefening}\n                    freeSolo\n                    options={exercises}\n                    fullWidth\n                    renderInput={(params) => (\n                      <TextField {...params} label=\"oefening\" name=\"oefening\" />\n                    )}\n                  />\n\n                  {console.log(`exercise: `, exercise)}\n                </div>\n                <div id=\"content_form_textfield\">\n                  <TextField\n                    // variant=\"outlined\"\n                    fullWidth={true}\n                    name=\"gewicht\"\n                    label=\"gewicht\"\n                    value={x.gewicht}\n                    onChange={(e) => handleInputChange(e, i)}\n                    type=\"number\"\n                  />\n                  {exercise.length - 1 === i && (\n                    <IconButton\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      onClick={() => handleAddClick(i)}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  )}\n                  {exercise.length !== 1 && (\n                    <IconButton\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={() => handleRemoveClick(i)}\n                    >\n                      <RemoveIcon />\n                    </IconButton>\n                  )}\n                </div>\n              </div>\n            )\n          })}\n\n          <div id=\"button\">\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={submit}\n              disabled={entryPassed}\n            >\n              submit\n            </Button>\n          </div>\n          <div id=\"button\">\n            <Button\n              fullWidth\n              onClick={onLogout}\n              color=\"secondary\"\n              variant=\"contained\"\n            >\n              Logout\n            </Button>\n          </div>\n\n          {showProgress ? (\n            <div>\n              Progress data:\n              <div>\n                <pre>{JSON.stringify(progressData, null, 2)}</pre>\n                {console.log(progressData)}\n                {/* <pre>{JSON.stringify(progressData.inputList, null, 2)}</pre> */}\n              </div>\n              <div id=\"button\">\n                <Button\n                  fullWidth\n                  onClick={() => setShowProgress(false)}\n                  color=\"secondary\"\n                  variant=\"contained\"\n                >\n                  Close progress\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div id=\"button\">\n              <Button\n                fullWidth\n                onClick={getData}\n                color=\"secondary\"\n                variant=\"contained\"\n              >\n                Show progress\n              </Button>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div id=\"button\">\n          <Button onClick={onLogin} variant=\"contained\">\n            Login with google\n          </Button>\n        </div>\n      )}\n\n      <Snackbar\n        open={openSuccess}\n        autoHideDuration={6000}\n        onClose={handleClose}\n      >\n        <Alert onClose={handleClose} severity=\"success\">\n          Gelukt!\n        </Alert>\n      </Snackbar>\n\n      <Snackbar open={openError} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          Er is iets mis gegaan...\n        </Alert>\n      </Snackbar>\n\n      <Helmet>\n        <title>{\"Fitness-Pall by Hakan Taskirmaz\"}</title>\n      </Helmet>\n    </div>\n  )\n}\n\nconst exercises = [\n  { oefening: \"Bench press\", Category: \"Chest\", inputValue: \"\" },\n  { oefening: \"Crossover\", Category: \"Chest\", inputValue: \"\" },\n  { oefening: \"Cable fly\", Category: \"Chest\", inputValue: \"\" },\n  { oefening: \"Chest press\", Category: \"Chest\", inputValue: \"\" },\n  { oefening: \"Incline bench press\", Category: \"Chest\", inputValue: \"\" },\n  { oefening: \"Decline bench press\", Category: \"Chest\", inputValue: \"\" },\n  { oefening: \"Lat pulley\", Category: \"Back\", inputValue: \"\" },\n  { oefening: \"Tricep push down\", Category: \"Tricep\", inputValue: \"\" },\n  { oefening: \"Deadlift\", Category: \"Full body\", inputValue: \"\" },\n  { oefening: \"Squats\", Category: \"Thighs\", inputValue: \"\" }\n]\n\nexport default App\n","/Users/hakantaskirmaz/Downloads/current_projects/fitness-pall/fitness-pall/src/reportWebVitals.js",[],"/Users/hakantaskirmaz/Downloads/current_projects/fitness-pall/fitness-pall/src/index.js",[],{"ruleId":"21","severity":1,"message":"22","line":38,"column":7,"nodeType":"23","messageId":"24","endLine":38,"endColumn":10},{"ruleId":"21","severity":1,"message":"25","line":40,"column":7,"nodeType":"23","messageId":"24","endLine":40,"endColumn":24},{"ruleId":"21","severity":1,"message":"26","line":48,"column":10,"nodeType":"23","messageId":"24","endLine":48,"endColumn":12},{"ruleId":"21","severity":1,"message":"27","line":48,"column":14,"nodeType":"23","messageId":"24","endLine":48,"endColumn":19},{"ruleId":"21","severity":1,"message":"28","line":57,"column":10,"nodeType":"23","messageId":"24","endLine":57,"endColumn":15},{"ruleId":"21","severity":1,"message":"29","line":57,"column":17,"nodeType":"23","messageId":"24","endLine":57,"endColumn":25},"no-unused-vars","'exc' is assigned a value but never used.","Identifier","unusedVar","'autcompletevalues' is assigned a value but never used.","'ex' is assigned a value but never used.","'setEx' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used."]